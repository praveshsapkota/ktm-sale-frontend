
  generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["nApi"] 
}

// datasource db {
//   provider = "sqlite"
//   url      = "file:./dev.db"
// }
datasource db {
  provider = "postgresql"
  // url      = "postgresql://ethan:qwerty@localhost:54321/postgresdb?schema=public"
  url = env("DATABASE_URL")
}





model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  billing       String?
  address       String?
  contactNumber String?    
  varified      Boolean?
  password      String?
  role          User_role     @default(USER)
  status        User_status   @default(INACTIVE)
  CartItem      CartItem?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


// model User {
//   id                     String        @id @default(cuid())
//   name                   String
//   image                  String? 
//   email                  String        @unique
//   emailConfirmationToken String?
//   googleId               String?       @unique
//   facebookId             String?       @unique
//   hasVerifiedEmail       Boolean?
//   password               String
//   contactNumber          String?          
//   resetToken             String?
//   resetTokenExpiry       Float?
//   billing                String?
//   address                String?
//   role                   User_role     @default(USER)
//   status                 User_status   @default(INACTIVE)
//   CartItem               CartItem?
// }


enum User_role {
  USER
  DeliveryBoy
  ADMIN
  MANAGER
}

enum User_status {
  INACTIVE
  ACTIVE
  BLOCKED
}

model CartItem {
  id       String @id 
  item     String
  quantity Int
  userId   String
  User     User   @relation(fields: [userId], references: [id])
  products Product[]
}

model Category {
  createdAt DateTime  @default(now())
  id        String    @id @default(cuid())
  name      String    @unique
  catagoryImage     String[]
  seoTags String
  status String
  slug      String    @unique
  updatedAt DateTime  @default(now())
  sub_Catagory sub_catagory[]
}

model sub_catagory {
  createdAt DateTime  @default(now())
  id        String    @id @default(cuid())
  name      String    @unique
  status    String
  subCatagoryImage     String[]
  seoTags   String
  slug      String    @unique
  updatedAt DateTime  @default(now())
  catagoryid String
  Catagory   Category @relation(fields: [catagoryid], references: [id])
  Products   Product[]
}

model Product {
  id            String         @id @default(cuid())
  name          String
  slug          String         @unique
  sku           String?        
  price         Int?
  productImage  String[]
  product_thumbnail String
  description   String
  unit          Int?
  discount      Int?
  salePrice     Int?
  variants       Json[]
  seoTags       String
  status        String
  updatedAt     DateTime       @default(now())
  cartid        String?
  subcatagoryId  String
  productenquerieID String?
  subCatagory      sub_catagory     @relation(fields: [subcatagoryId], references: [id])
  cart  CartItem? @relation(fields: [cartid], references: [id])
  productEnquerie Product_Enquerie? @relation(fields: [productenquerieID],references:[id])

}

model Product_Enquerie {
  id            String @id @default(cuid())
  email         String
  company_name  String
  address       String
  country       String
  state         String
  phoneNumber   String
  products      Product[]
  unit          Int
  orderFrequency String

} 




