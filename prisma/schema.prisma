
  generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["nApi"] 
}

// datasource db {
//   provider = "sqlite"
//   url      = "file:./dev.db"
// }
datasource db {
  provider = "postgresql"
  // url      = "postgresql://ethan:qwerty@localhost:54321/postgresdb?schema=public"
  url = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}





model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id                  String       @id @default(cuid())
  sessionToken        String       @unique
  userId              String
  expires             DateTime
  user                User         @relation(fields: [userId], references: [id])
}

model User {
  id                  String        @id @default(cuid())
  name                String?
  email               String?       @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  accounts            Account[]
  sessions            Session[]
  billing             String?
  address             String?
  contactNumber       String?    
  varified            Boolean?
  role                User_role     @default(USER)
  status              User_status   @default(INACTIVE)
  Cart          Cart?
}

model VerificationToken {
  identifier          String
  token               String       @unique
  expires             DateTime

  @@unique([identifier, token])
}


// model User {
//   id                     String        @id @default(cuid())
//   name                   String
//   image                  String? 
//   email                  String        @unique
//   emailConfirmationToken String?
//   googleId               String?       @unique
//   facebookId             String?       @unique
//   hasVerifiedEmail       Boolean?
//   password               String
//   contactNumber          String?          
//   resetToken             String?
//   resetTokenExpiry       Float?
//   billing                String?
//   address                String?
//   role                   User_role     @default(USER)
//   status                 User_status   @default(INACTIVE)
//   CartItem               CartItem?
// }


enum User_role {
  USER
  DeliveryBoy
  ADMIN
  MANAGER
}

enum User_status {
  INACTIVE
  ACTIVE
  BLOCKED
}

model Category {
  createdAt             DateTime        @default(now())
  id                    String          @id @default(cuid())
  name                  String          @unique
  catagoryImage         String[]
  seoTags               String
  status                String
  slug                  String          @unique
  updatedAt             DateTime        @default(now())
  sub_Catagory sub_catagory[]
}

model sub_catagory {
  createdAt             DateTime        @default(now())
  id                    String          @id @default(cuid())
  name                  String          @unique     
  status                String
  subCatagoryImage      String[]
  seoTags               String
  slug                  String          @unique
  updatedAt             DateTime        @default(now())
  catagoryid            String
  Catagory              Category        @relation(fields: [catagoryid], references: [id])
  Products              Product[]
}

model Product {
  id                    String          @id @default(cuid())
  name                  String
  slug                  String          @unique
  sku                   String?        
  price                 Int?
  productImage          String[]
  product_thumbnail     String
  description           String
  unit                  Int?
  discount              Int?
  salePrice             Int?
  variants              Json[]
  seoTags               String
  status                String
  updatedAt             DateTime          @default(now())
  subcatagoryId         String
  subCatagory           sub_catagory?     @relation(fields: [subcatagoryId], references: [id])
  cartid                String?
  cartIteam             CartIteam?        @relation(fields: [cartid], references: [id])        
  enquiredProductId     String?
  enquiredProduct       enquiredProduct? @relation(fields: [enquiredProductId],references:[id])

}

model Cart {
  id                    String             @id @default(cuid())
  iteams              CartIteam[]
  userId                String
  User                  User               @relation(fields: [userId], references: [id])
}

model CartIteam {
  id                    String              @id @default(cuid())
  quantity              Int
  Product             Product?
  cartId                String?
  Cart                  Cart?               @relation(fields: [cartId],references:[id])
}




//product enquerie 
model Product_Enquerie {
  id                    String              @id @default(cuid())
  email                 String?
  company_name          String?
  address               String?
  country               String?
  state                 String?
  phoneNumber           String?
  EnquiredProducts      enquiredProduct[]
  unit                  Int?
  orderFrequency        String?
} 

model enquiredProduct {
  id                    String               @id @default(cuid())
  productname           Product?
  quantity              Int?
  product_EnquerieId    String?
  productEnquerie       Product_Enquerie?    @relation(fields: [product_EnquerieId], references:[id])
}



